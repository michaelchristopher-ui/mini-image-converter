// Code generated by mockery v2.14.0. DO NOT EDIT.

package mockgocvadapter

import (
	gocv "gocv.io/x/gocv"

	image "image"

	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

type Adapter_Expecter struct {
	mock *mock.Mock
}

func (_m *Adapter) EXPECT() *Adapter_Expecter {
	return &Adapter_Expecter{mock: &_m.Mock}
}

// IMRead provides a mock function with given fields: name, flags
func (_m *Adapter) IMRead(name string, flags gocv.IMReadFlag) gocv.Mat {
	ret := _m.Called(name, flags)

	var r0 gocv.Mat
	if rf, ok := ret.Get(0).(func(string, gocv.IMReadFlag) gocv.Mat); ok {
		r0 = rf(name, flags)
	} else {
		r0 = ret.Get(0).(gocv.Mat)
	}

	return r0
}

// Adapter_IMRead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IMRead'
type Adapter_IMRead_Call struct {
	*mock.Call
}

// IMRead is a helper method to define mock.On call
//   - name string
//   - flags gocv.IMReadFlag
func (_e *Adapter_Expecter) IMRead(name interface{}, flags interface{}) *Adapter_IMRead_Call {
	return &Adapter_IMRead_Call{Call: _e.mock.On("IMRead", name, flags)}
}

func (_c *Adapter_IMRead_Call) Run(run func(name string, flags gocv.IMReadFlag)) *Adapter_IMRead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gocv.IMReadFlag))
	})
	return _c
}

func (_c *Adapter_IMRead_Call) Return(_a0 gocv.Mat) *Adapter_IMRead_Call {
	_c.Call.Return(_a0)
	return _c
}

// IMWrite provides a mock function with given fields: name, img
func (_m *Adapter) IMWrite(name string, img gocv.Mat) bool {
	ret := _m.Called(name, img)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, gocv.Mat) bool); ok {
		r0 = rf(name, img)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Adapter_IMWrite_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IMWrite'
type Adapter_IMWrite_Call struct {
	*mock.Call
}

// IMWrite is a helper method to define mock.On call
//   - name string
//   - img gocv.Mat
func (_e *Adapter_Expecter) IMWrite(name interface{}, img interface{}) *Adapter_IMWrite_Call {
	return &Adapter_IMWrite_Call{Call: _e.mock.On("IMWrite", name, img)}
}

func (_c *Adapter_IMWrite_Call) Run(run func(name string, img gocv.Mat)) *Adapter_IMWrite_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gocv.Mat))
	})
	return _c
}

func (_c *Adapter_IMWrite_Call) Return(_a0 bool) *Adapter_IMWrite_Call {
	_c.Call.Return(_a0)
	return _c
}

// IMWriteWithParams provides a mock function with given fields: name, img, params
func (_m *Adapter) IMWriteWithParams(name string, img gocv.Mat, params []int) bool {
	ret := _m.Called(name, img, params)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, gocv.Mat, []int) bool); ok {
		r0 = rf(name, img, params)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Adapter_IMWriteWithParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IMWriteWithParams'
type Adapter_IMWriteWithParams_Call struct {
	*mock.Call
}

// IMWriteWithParams is a helper method to define mock.On call
//   - name string
//   - img gocv.Mat
//   - params []int
func (_e *Adapter_Expecter) IMWriteWithParams(name interface{}, img interface{}, params interface{}) *Adapter_IMWriteWithParams_Call {
	return &Adapter_IMWriteWithParams_Call{Call: _e.mock.On("IMWriteWithParams", name, img, params)}
}

func (_c *Adapter_IMWriteWithParams_Call) Run(run func(name string, img gocv.Mat, params []int)) *Adapter_IMWriteWithParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(gocv.Mat), args[2].([]int))
	})
	return _c
}

func (_c *Adapter_IMWriteWithParams_Call) Return(_a0 bool) *Adapter_IMWriteWithParams_Call {
	_c.Call.Return(_a0)
	return _c
}

// Resize provides a mock function with given fields: src, dst, sz, fx, fy, interp
func (_m *Adapter) Resize(src gocv.Mat, dst *gocv.Mat, sz image.Point, fx float64, fy float64, interp gocv.InterpolationFlags) {
	_m.Called(src, dst, sz, fx, fy, interp)
}

// Adapter_Resize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resize'
type Adapter_Resize_Call struct {
	*mock.Call
}

// Resize is a helper method to define mock.On call
//   - src gocv.Mat
//   - dst *gocv.Mat
//   - sz image.Point
//   - fx float64
//   - fy float64
//   - interp gocv.InterpolationFlags
func (_e *Adapter_Expecter) Resize(src interface{}, dst interface{}, sz interface{}, fx interface{}, fy interface{}, interp interface{}) *Adapter_Resize_Call {
	return &Adapter_Resize_Call{Call: _e.mock.On("Resize", src, dst, sz, fx, fy, interp)}
}

func (_c *Adapter_Resize_Call) Run(run func(src gocv.Mat, dst *gocv.Mat, sz image.Point, fx float64, fy float64, interp gocv.InterpolationFlags)) *Adapter_Resize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(gocv.Mat), args[1].(*gocv.Mat), args[2].(image.Point), args[3].(float64), args[4].(float64), args[5].(gocv.InterpolationFlags))
	})
	return _c
}

func (_c *Adapter_Resize_Call) Return() *Adapter_Resize_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
