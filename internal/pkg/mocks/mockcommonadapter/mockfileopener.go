// Code generated by mockery v2.14.0. DO NOT EDIT.

package mockcommonadapter

import (
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// FileOpener is an autogenerated mock type for the FileOpener type
type FileOpener struct {
	mock.Mock
}

type FileOpener_Expecter struct {
	mock *mock.Mock
}

func (_m *FileOpener) EXPECT() *FileOpener_Expecter {
	return &FileOpener_Expecter{mock: &_m.Mock}
}

// Open provides a mock function with given fields:
func (_m *FileOpener) Open() (multipart.File, error) {
	ret := _m.Called()

	var r0 multipart.File
	if rf, ok := ret.Get(0).(func() multipart.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(multipart.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileOpener_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type FileOpener_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
func (_e *FileOpener_Expecter) Open() *FileOpener_Open_Call {
	return &FileOpener_Open_Call{Call: _e.mock.On("Open")}
}

func (_c *FileOpener_Open_Call) Run(run func()) *FileOpener_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FileOpener_Open_Call) Return(_a0 multipart.File, _a1 error) *FileOpener_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewFileOpener interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileOpener creates a new instance of FileOpener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileOpener(t mockConstructorTestingTNewFileOpener) *FileOpener {
	mock := &FileOpener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
