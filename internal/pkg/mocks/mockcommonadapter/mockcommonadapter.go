// Code generated by mockery v2.14.0. DO NOT EDIT.

package mockcommonadapter

import (
	commonadapter "mini-image-converter/internal/pkg/core/adapter/commonadapter"

	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

type Adapter_Expecter struct {
	mock *mock.Mock
}

func (_m *Adapter) EXPECT() *Adapter_Expecter {
	return &Adapter_Expecter{mock: &_m.Mock}
}

// IsPNG provides a mock function with given fields: fileReader, fileString
func (_m *Adapter) IsPNG(fileReader commonadapter.FileReader, fileString string) (bool, error) {
	ret := _m.Called(fileReader, fileString)

	var r0 bool
	if rf, ok := ret.Get(0).(func(commonadapter.FileReader, string) bool); ok {
		r0 = rf(fileReader, fileString)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(commonadapter.FileReader, string) error); ok {
		r1 = rf(fileReader, fileString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_IsPNG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPNG'
type Adapter_IsPNG_Call struct {
	*mock.Call
}

// IsPNG is a helper method to define mock.On call
//   - fileReader commonadapter.FileReader
//   - fileString string
func (_e *Adapter_Expecter) IsPNG(fileReader interface{}, fileString interface{}) *Adapter_IsPNG_Call {
	return &Adapter_IsPNG_Call{Call: _e.mock.On("IsPNG", fileReader, fileString)}
}

func (_c *Adapter_IsPNG_Call) Run(run func(fileReader commonadapter.FileReader, fileString string)) *Adapter_IsPNG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(commonadapter.FileReader), args[1].(string))
	})
	return _c
}

func (_c *Adapter_IsPNG_Call) Return(_a0 bool, _a1 error) *Adapter_IsPNG_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RetrieveFile provides a mock function with given fields: req, filename, creator
func (_m *Adapter) RetrieveFile(req commonadapter.FileOpener, filename string, creator commonadapter.FileCreator) (commonadapter.RetrieveFileRes, error) {
	ret := _m.Called(req, filename, creator)

	var r0 commonadapter.RetrieveFileRes
	if rf, ok := ret.Get(0).(func(commonadapter.FileOpener, string, commonadapter.FileCreator) commonadapter.RetrieveFileRes); ok {
		r0 = rf(req, filename, creator)
	} else {
		r0 = ret.Get(0).(commonadapter.RetrieveFileRes)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(commonadapter.FileOpener, string, commonadapter.FileCreator) error); ok {
		r1 = rf(req, filename, creator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_RetrieveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveFile'
type Adapter_RetrieveFile_Call struct {
	*mock.Call
}

// RetrieveFile is a helper method to define mock.On call
//   - req commonadapter.FileOpener
//   - filename string
//   - creator commonadapter.FileCreator
func (_e *Adapter_Expecter) RetrieveFile(req interface{}, filename interface{}, creator interface{}) *Adapter_RetrieveFile_Call {
	return &Adapter_RetrieveFile_Call{Call: _e.mock.On("RetrieveFile", req, filename, creator)}
}

func (_c *Adapter_RetrieveFile_Call) Run(run func(req commonadapter.FileOpener, filename string, creator commonadapter.FileCreator)) *Adapter_RetrieveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(commonadapter.FileOpener), args[1].(string), args[2].(commonadapter.FileCreator))
	})
	return _c
}

func (_c *Adapter_RetrieveFile_Call) Return(_a0 commonadapter.RetrieveFileRes, _a1 error) *Adapter_RetrieveFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
