// Code generated by mockery v2.14.0. DO NOT EDIT.

package mockioadapter

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

type Adapter_Expecter struct {
	mock *mock.Mock
}

func (_m *Adapter) EXPECT() *Adapter_Expecter {
	return &Adapter_Expecter{mock: &_m.Mock}
}

// Copy provides a mock function with given fields: dst, src
func (_m *Adapter) Copy(dst io.Writer, src io.Reader) (int64, error) {
	ret := _m.Called(dst, src)

	var r0 int64
	if rf, ok := ret.Get(0).(func(io.Writer, io.Reader) int64); ok {
		r0 = rf(dst, src)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Writer, io.Reader) error); ok {
		r1 = rf(dst, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_Copy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Copy'
type Adapter_Copy_Call struct {
	*mock.Call
}

// Copy is a helper method to define mock.On call
//   - dst io.Writer
//   - src io.Reader
func (_e *Adapter_Expecter) Copy(dst interface{}, src interface{}) *Adapter_Copy_Call {
	return &Adapter_Copy_Call{Call: _e.mock.On("Copy", dst, src)}
}

func (_c *Adapter_Copy_Call) Run(run func(dst io.Writer, src io.Reader)) *Adapter_Copy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer), args[1].(io.Reader))
	})
	return _c
}

func (_c *Adapter_Copy_Call) Return(written int64, err error) *Adapter_Copy_Call {
	_c.Call.Return(written, err)
	return _c
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
