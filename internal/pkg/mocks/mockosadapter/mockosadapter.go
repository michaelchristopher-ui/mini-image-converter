// Code generated by mockery v2.14.0. DO NOT EDIT.

package mockosadapter

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

type Adapter_Expecter struct {
	mock *mock.Mock
}

func (_m *Adapter) EXPECT() *Adapter_Expecter {
	return &Adapter_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: path
func (_m *Adapter) Create(path string) (io.WriteCloser, error) {
	ret := _m.Called(path)

	var r0 io.WriteCloser
	if rf, ok := ret.Get(0).(func(string) io.WriteCloser); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Adapter_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - path string
func (_e *Adapter_Expecter) Create(path interface{}) *Adapter_Create_Call {
	return &Adapter_Create_Call{Call: _e.mock.On("Create", path)}
}

func (_c *Adapter_Create_Call) Run(run func(path string)) *Adapter_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Adapter_Create_Call) Return(_a0 io.WriteCloser, _a1 error) *Adapter_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Open provides a mock function with given fields: path
func (_m *Adapter) Open(path string) (io.ReadCloser, error) {
	ret := _m.Called(path)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string) io.ReadCloser); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_Open_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Open'
type Adapter_Open_Call struct {
	*mock.Call
}

// Open is a helper method to define mock.On call
//   - path string
func (_e *Adapter_Expecter) Open(path interface{}) *Adapter_Open_Call {
	return &Adapter_Open_Call{Call: _e.mock.On("Open", path)}
}

func (_c *Adapter_Open_Call) Run(run func(path string)) *Adapter_Open_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Adapter_Open_Call) Return(_a0 io.ReadCloser, _a1 error) *Adapter_Open_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ReadFile provides a mock function with given fields: path
func (_m *Adapter) ReadFile(path string) ([]byte, error) {
	ret := _m.Called(path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type Adapter_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - path string
func (_e *Adapter_Expecter) ReadFile(path interface{}) *Adapter_ReadFile_Call {
	return &Adapter_ReadFile_Call{Call: _e.mock.On("ReadFile", path)}
}

func (_c *Adapter_ReadFile_Call) Run(run func(path string)) *Adapter_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Adapter_ReadFile_Call) Return(_a0 []byte, _a1 error) *Adapter_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Remove provides a mock function with given fields: path
func (_m *Adapter) Remove(path string) error {
	ret := _m.Called(path)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Adapter_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type Adapter_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - path string
func (_e *Adapter_Expecter) Remove(path interface{}) *Adapter_Remove_Call {
	return &Adapter_Remove_Call{Call: _e.mock.On("Remove", path)}
}

func (_c *Adapter_Remove_Call) Run(run func(path string)) *Adapter_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Adapter_Remove_Call) Return(_a0 error) *Adapter_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
