// Code generated by mockery v2.14.0. DO NOT EDIT.

package mockimageadapter

import (
	imageadapter "mini-image-converter/internal/pkg/core/adapter/imageadapter"

	mock "github.com/stretchr/testify/mock"
)

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

type Adapter_Expecter struct {
	mock *mock.Mock
}

func (_m *Adapter) EXPECT() *Adapter_Expecter {
	return &Adapter_Expecter{mock: &_m.Mock}
}

// Compress provides a mock function with given fields: req
func (_m *Adapter) Compress(req imageadapter.CompressRequest) (imageadapter.CompressResponse, error) {
	ret := _m.Called(req)

	var r0 imageadapter.CompressResponse
	if rf, ok := ret.Get(0).(func(imageadapter.CompressRequest) imageadapter.CompressResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(imageadapter.CompressResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(imageadapter.CompressRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_Compress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compress'
type Adapter_Compress_Call struct {
	*mock.Call
}

// Compress is a helper method to define mock.On call
//   - req imageadapter.CompressRequest
func (_e *Adapter_Expecter) Compress(req interface{}) *Adapter_Compress_Call {
	return &Adapter_Compress_Call{Call: _e.mock.On("Compress", req)}
}

func (_c *Adapter_Compress_Call) Run(run func(req imageadapter.CompressRequest)) *Adapter_Compress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(imageadapter.CompressRequest))
	})
	return _c
}

func (_c *Adapter_Compress_Call) Return(_a0 imageadapter.CompressResponse, _a1 error) *Adapter_Compress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Convert provides a mock function with given fields: req
func (_m *Adapter) Convert(req imageadapter.ConvertRequest) (imageadapter.ConvertResponse, error) {
	ret := _m.Called(req)

	var r0 imageadapter.ConvertResponse
	if rf, ok := ret.Get(0).(func(imageadapter.ConvertRequest) imageadapter.ConvertResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(imageadapter.ConvertResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(imageadapter.ConvertRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type Adapter_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - req imageadapter.ConvertRequest
func (_e *Adapter_Expecter) Convert(req interface{}) *Adapter_Convert_Call {
	return &Adapter_Convert_Call{Call: _e.mock.On("Convert", req)}
}

func (_c *Adapter_Convert_Call) Run(run func(req imageadapter.ConvertRequest)) *Adapter_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(imageadapter.ConvertRequest))
	})
	return _c
}

func (_c *Adapter_Convert_Call) Return(_a0 imageadapter.ConvertResponse, _a1 error) *Adapter_Convert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RemoveFile provides a mock function with given fields: fileName
func (_m *Adapter) RemoveFile(fileName string) {
	_m.Called(fileName)
}

// Adapter_RemoveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFile'
type Adapter_RemoveFile_Call struct {
	*mock.Call
}

// RemoveFile is a helper method to define mock.On call
//   - fileName string
func (_e *Adapter_Expecter) RemoveFile(fileName interface{}) *Adapter_RemoveFile_Call {
	return &Adapter_RemoveFile_Call{Call: _e.mock.On("RemoveFile", fileName)}
}

func (_c *Adapter_RemoveFile_Call) Run(run func(fileName string)) *Adapter_RemoveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Adapter_RemoveFile_Call) Return() *Adapter_RemoveFile_Call {
	_c.Call.Return()
	return _c
}

// Resize provides a mock function with given fields: req
func (_m *Adapter) Resize(req imageadapter.ResizeRequest) (imageadapter.ResizeResponse, error) {
	ret := _m.Called(req)

	var r0 imageadapter.ResizeResponse
	if rf, ok := ret.Get(0).(func(imageadapter.ResizeRequest) imageadapter.ResizeResponse); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(imageadapter.ResizeResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(imageadapter.ResizeRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Adapter_Resize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resize'
type Adapter_Resize_Call struct {
	*mock.Call
}

// Resize is a helper method to define mock.On call
//   - req imageadapter.ResizeRequest
func (_e *Adapter_Expecter) Resize(req interface{}) *Adapter_Resize_Call {
	return &Adapter_Resize_Call{Call: _e.mock.On("Resize", req)}
}

func (_c *Adapter_Resize_Call) Run(run func(req imageadapter.ResizeRequest)) *Adapter_Resize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(imageadapter.ResizeRequest))
	})
	return _c
}

func (_c *Adapter_Resize_Call) Return(_a0 imageadapter.ResizeResponse, _a1 error) *Adapter_Resize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewAdapter interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t mockConstructorTestingTNewAdapter) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
